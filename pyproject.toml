[build-system]
build-backend = "flit_core.buildapi"
requires = ["flit_core<4,>=3.8.0"]

[project]
authors = [{name = "jupyterlab-fonts contributors", email = "deathbeds@googlegroups.com"}]
classifiers = [
  "Framework :: Jupyter :: JupyterLab :: 3",
  "Framework :: Jupyter :: JupyterLab :: 4",
  "Framework :: Jupyter :: JupyterLab :: Extensions :: Prebuilt",
  "Framework :: Jupyter :: JupyterLab :: Extensions",
  "Framework :: Jupyter :: JupyterLab",
  "Framework :: Jupyter",
  "License :: OSI Approved :: BSD License",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3",
]
dependencies = ["jupyterlab >=3.5,<5"]
dynamic = ["description"]
name = "jupyterlab_fonts"
readme = "README.md"
requires-python = ">=3.8"
version = "3.0.0a0"

[project.urls]
"Bug Tracker" = "https://github.com/deathbeds/jupyterlab-fonts/issues"
"Changelog" = "https://github.com/deathbeds/jupyterlab-fonts/blob/main/CHANGELOG.md"
"Source" = "https://github.com/deathbeds/jupyterlab-fonts"

[tool.flit.sdist]
include = ["src/jupyterlab_fonts/_d"]

[tool.flit.external-data]
directory = "src/jupyterlab_fonts/_d"

[tool.doit]
backend = "sqlite3"
par_type = "thread"
verbosity = 2

[tool.doit.commands.list]
status = true
subtasks = true

[tool.doitoml]
config_paths = [":get::toml::.github/specs/__lock__.toml::", ":get::json::package.json::doitoml"]
prefix = "dt"
validate = true

[tool.doitoml.env]
# other people's stuff
CI = 0
CONDARC = ".github/.condarc"
JUPYTER_PLATFORM_DIRS = 1
MAMBA_NO_BANNER = 1
PYTHONIOENCODING = "utf-8"
PYTHONUNBUFFERED = 1
READTHEDOCS = 0
SOURCE_DATE_EPOCH = ":get|0::json::build/git_info.json::SOURCE_DATE_EPOCH"
# our stuff
PY_NAME = ":get::toml::pyproject.toml::project::name"
PY_VERSION = ":get::toml::pyproject.toml::project::version"
# locks
DEFAULT_PY = "3.11"
THIS_PY = "3.11"
THIS_SUBDIR = "linux-64"

[tool.doitoml.paths]
all_lock_py = [":glob::.github/specs::*.py"]
all_py = ["::dodo", "::all_scripts", "::all_py_src", "::all_lock_py"]
all_py_src = [":rglob::src::*.py"]
all_robot = [":rglob::atest::*.robot", ":rglob::atest::*.resource"]
all_scripts = [":glob::scripts::*.py"]
all_toml = ["::ppt"]
atest_dir = ["atest"]
atest_report = ["build/reports/robot/${THIS_SUBDIR}_${DEFAULT_LAB}"]
atest_report_html = ["build/reports/robot/${THIS_SUBDIR}_${DEFAULT_LAB}/log.html"]
dodo = ["dodo.py"]
env_atest_history = [".envs/atest_${THIS_SUBDIR}/conda-meta/history"]
env_atest_prefix = [".envs/atest_${THIS_SUBDIR}"]
env_build_history = [".envs/build_${THIS_SUBDIR}_${DEFAULT_LAB}/conda-meta/history"]
env_build_prefix = [".envs/build_${THIS_SUBDIR}_${DEFAULT_LAB}"]
env_lab_history = [".envs/lab_${THIS_SUBDIR}_${DEFAULT_LAB}/conda-meta/history"]
env_lab_prefix = [".envs/lab_${THIS_SUBDIR}_${DEFAULT_LAB}"]
env_lock_dir = [".github/locks"]
ext_list = ["build/labext/lab_${THIS_SUBDIR}_${DEFAULT_LAB}.txt"]
git_info = ["build/git_info.json"]
license = ["LICENSE"]
lock_build = ["build/locks"]
lock_files = [":glob::build/locks::*.txt::/s/::build/locks::.github/locks::/s/::.txt::.conda.lock"]
lock_headers = [":glob::build/locks::*.txt"]
lock_preflight_yml = ["build/locks/_preflight.yml"]
pip_freeze = ["build/pip/lab_${THIS_SUBDIR}_${DEFAULT_LAB}.txt"]
ppt = ["pyproject.toml"]
pytest_html_cov = ["build/reports/pytest/${THIS_SUBDIR}_${DEFAULT_LAB}/htmlcov/index.html"]
pytest_html_cov_index = ["build/reports/pytest/${THIS_SUBDIR}_${DEFAULT_LAB}/htmlcov"]
pytest_html_report = ["build/reports/pytest/${THIS_SUBDIR}_${DEFAULT_LAB}/index.html"]
readme = ["README.md"]
sdist = ["dist/${PY_NAME}-${PY_VERSION}.tar.gz"]
wheel = ["dist/${PY_NAME}-${PY_VERSION}-py3-none-any.whl"]

[tool.doitoml.tokens]
conda_run = ["conda", "run", "--no-capture-output"]
conda_run_atest = ["::conda_run_prefix", "::env_atest_prefix"]
conda_run_build = ["::conda_run_prefix", "::env_build_prefix"]
conda_run_lab = ["::conda_run_prefix", "::env_lab_prefix"]
conda_run_lab_pip = ["::conda_run_lab", "python", "-m", "pip"]
conda_run_prefix = ["::conda_run", "--prefix"]
taplo_opts = [
  "--option=array_auto_collapse=true",
  "--option=compact_inline_tables=true",
  "--option=column_width=100",
  "--option=reorder_keys=true",
]

[tool.doitoml.tasks.fix.toml]
actions = [["::conda_run_build", "taplo", "fmt", "::taplo_opts", "::all_toml"]]
doc = "Format toml with taplo"
file_dep = ["::all_toml", '::env_build_history']

[tool.doitoml.tasks.fix.ssort]
actions = [["::conda_run_build", "ssort", "::all_py"]]
doc = "Predictably order python source with `ssort`"
file_dep = ["::ppt", "::all_py", '::env_build_history']

[tool.doitoml.tasks.fix.black]
actions = [
  [
    "::conda_run_build",
    "ruff",
    "--fix-only",
    "--quiet",
    "::all_py",
  ],
  [
    "::conda_run_build",
    "black",
    "::all_py",
  ],
]
doc = "Format python source with `ruff` and `black`"
file_dep = ["::ppt", "::all_py", '::env_build_history']
task_dep = ["dt:fix:ssort"]

[tool.doitoml.tasks.fix.robot]
actions = [["::conda_run_build", "robotidy", "::atest_dir"]]
doc = "Format robotframework code with `robotframework-tidy`"
file_dep = ["::all_robot", "::env_build_history"]

[tool.doitoml.tasks.dist.preflight]
actions = [{py = {"scripts.actions:git_info" = {}}}]
doc = "write out git info to json"
meta = {doitoml = {log = "::git_info"}}
targets = ["::git_info"]

[tool.doitoml.tasks.dist.flit]
actions = [["::conda_run_build", "flit", "build"]]
file_dep = [
  "::js-meta::all_dist_pkg_json",
  "::all_py_src",
  "::ppt",
  "::license",
  "::readme",
  "::git_info",
]
targets = ["::wheel", "::sdist"]

[tool.doitoml.tasks.dev.pip.install]
actions = [
  [
    "::conda_run_lab_pip",
    "install",
    "--no-deps",
    "--no-build-isolation",
    "--no-cache-dir",
    "--ignore-installed",
    "::wheel",
  ],
]
file_dep = ["::env_lab_history", "::wheel"]

[tool.doitoml.tasks.dev.pip.check]
actions = [["::conda_run_lab_pip", "freeze"], ["::conda_run_lab_pip", "check"]]
file_dep = ["::ppt"]
meta = {doitoml = {log = ["::pip_freeze"]}}
targets = ["::pip_freeze"]
task_dep = ["dt:dev:pip:install"]

[tool.doitoml.tasks.dev.ext.list]
actions = [["::conda_run_lab", "jupyter", "labextension", "list"]]
file_dep = ["::ppt", "::pip_freeze", "::wheel"]
meta = {doitoml = {log = ["::ext_list"]}}
targets = ["::ext_list"]

[tool.doitoml.tasks.test.pytest]
actions = [
  [
    "::conda_run_lab",
    "pytest",
    "--pyargs",
    "${PY_NAME}",
    "--cov",
    "${PY_NAME}",
    "--cov-branch",
    "--no-cov-on-fail",
    "--cov-fail-under=100",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:build/reports/pytest/${THIS_SUBDIR}_${DEFAULT_LAB}/htmlcov",
    "--html",
    "::pytest_html_report",
    "--self-contained-html",
  ],
]
file_dep = ["::ppt", "::all_py_src", "::pip_freeze"]
meta = {doitoml = {env = {COVERAGE_FILE = "build/reports/pytest/${THIS_SUBDIR}_${DEFAULT_LAB}/.coverage"}}}
targets = ["::pytest_html_cov"]

[tool.doitoml.tasks.test.robot]
actions = [
  [
    "::conda_run_atest",
    # "robot", "--exitonfailure", "--loglevel", "TRACE",
    "pabot",
    "--artifactsinsubfolders",
    "--artifacts",
    "png,log,txt,svg,ipynb,json",
    "--loglevel",
    "TRACE",
    "--variable=ATTEMPT:0",
    "--variable=OS:${THIS_SUBDIR}",
    "--variable=ROOT:../../..",
    "--outputdir",
    "::atest_report",
    "::atest_dir",
  ],
]
file_dep = ["::env_atest_history", "::ext_list"]
meta = {doitoml = {env = {JUPYTERLAB_CONDA_PREFIX = "::env_lab_prefix"}}}
targets = ["::atest_report_html"]

[tool.doitoml.tasks.serve.lab]
actions = [["::conda_run_lab", "jupyter", "lab", "--no-browser", "--debug"]]
file_dep = ["::ext_list"]
uptodate = [false]


[tool.ruff]
cache-dir = "build/.cache/ruff"
ignore = [
  "D211",
  "D213",
  # if it doesn't bother mypy...
  "ANN101",
  "ANN401",
  "PGH003",
  # keep 3.8 compat
  "UP006",
  "UP007",
  # meh
  "N812",
]
select = [
  "A",
  "ARG",
  "B",
  "BLE",
  "C4",
  "C90",
  "COM",
  "D",
  "DJ",
  "DTZ",
  "E",
  "EM",
  # "ERA", # causes syntax errors, check later
  "EXE",
  "F",
  "FBT",
  "G",
  "I",
  "ICN",
  "INP",
  "ISC",
  "N",
  "NPY",
  "PD",
  "PGH",
  "PIE",
  "PL",
  "PT",
  "PTH",
  "PYI",
  "Q",
  "RET",
  "RSE",
  "RUF",
  "S",
  "SIM",
  "SLF",
  "T10",
  "T20",
  "TCH",
  "TID",
  "UP",
  "W",
  "YTT",
]

[tool.ruff.isort]
known-first-party = ["jupyterlab_fonts"]

[tool.pytest.ini_options]
addopts = [
  "--pyargs",
  "jupyterlab_fonts",
  "-vv",
  # for humans
  "--self-contained-html",
  "--color=yes",
  # misc
  "--ff",
  "--tb=long",
]
cache_dir = "build/.cache/pytest"
script_launch_mode = "subprocess"
