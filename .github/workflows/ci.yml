name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PYTHONIOENCODING: utf-8
  PYTHONUNBUFFERED: 1
  MAMBA_NO_BANNER: 1
  # ours
  CACHE_EPOCH: 0


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: .github/locks/lock_linux-64.conda.lock
          environment-name: ci
          init-shell: bash

      - name: cache (node)
        uses: actions/cache@v3
        id: cache-node-modules
        with:
          path: '**/node_modules'
          key: |
            ${{ env.CACHE_EPOCH }}-ubuntu-node-modules-${{ hashFiles('yarn.lock') }}

      - name: preflight
        run: source /home/runner/micromamba/envs/ci/bin/activate && doit lock:preflight

      - name: setup (js)
        run: source /home/runner/micromamba/envs/ci/bin/activate && doit js-root:setup

      - name: build
        run: source /home/runner/micromamba/envs/ci/bin/activate && doit -n4 *:build:* || exit 0

      - name: build (retry)
        run: source /home/runner/micromamba/envs/ci/bin/activate && doit *:build:*

      - name: dist
        run: source /home/runner/micromamba/envs/ci/bin/activate && doit *:dist:* || doit *:dist:*

      - name: upload (dist)
        uses: actions/upload-artifact@v3
        with:
          name: jupyterlab-fonts-${{ github.run_number }}-dist
          path: ./dist

      - name: upload (preflight)
        uses: actions/upload-artifact@v3
        with:
          name: jupyterlab-fonts-${{ github.run_number }}-lock-preflight
          path: ./build/locks

  lint:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: .github/locks/lock_linux-64.conda.lock
          environment-name: ci
          init-shell: bash

      - name: cache (node)
        uses: actions/cache@v3
        id: cache-node-modules
        with:
          path: '**/node_modules'
          key: |
            ${{ env.CACHE_EPOCH }}-ubuntu-node-modules-${{ hashFiles('yarn.lock') }}

      - name: download (preflight)
        uses: actions/download-artifact@v3
        with:
          name: jupyterlab-fonts-${{ github.run_number }}-lock-preflight
          path: ./build/locks

      - name: lint
        run: source /home/runner/micromamba/envs/ci/bin/activate && doit -n4 *:lint:* || doit *:lint:*

  # test:
  #   needs: [build]
  #   name: test ${{ matrix.os }} ${{ matrix.python-version }}
  #   runs-on: ${{ matrix.os }}-latest
  #   env:
  #     TESTING_IN_CI: '1'
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: ['ubuntu', 'macos', 'windows']
  #       python-version: ['3.7', '3.10']
  #       include:
  #         - python-version: '3.7'
  #           clean-artifacts: 'whl'
  #         - python-version: '3.10'
  #           clean-artifacts: 'tar.gz'

  #   steps:
  #     - name: configure line endings
  #       run: |
  #         git config --global core.autocrlf false

  #     - name: checkout
  #       uses: actions/checkout@v3

  #     - name: cache (conda)
  #       uses: actions/cache@v3
  #       with:
  #         path: ~/conda_pkgs_dir
  #         key: |
  #           ${{ env.CACHE_EPOCH }}-${{ runner.os }}-conda-${{ matrix.python-version }}-${{ hashFiles('.github/environment.yml') }}
  #         restore-keys: |
  #           ${{ env.CACHE_EPOCH }}-${{ runner.os }}-conda-${{ matrix.python-version }}-

  #     - name: install (conda)
  #       uses: conda-incubator/setup-miniconda@v2
  #       with:
  #         miniforge-variant: Mambaforge
  #         miniforge-version: 4.13.0-1
  #         python-version: ${{ matrix.python-version }}
  #         environment-file: .binder/environment.yml
  #         use-only-tar-bz2: true
  #         use-mamba: true

  #     - name: download (dist)
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: jupyterlab-fonts-${{ github.run_number }}-dist
  #         path: ./dist

  #     - name: clean
  #       shell: bash -l {0}
  #       run: |
  #         rm dist/*.${{ matrix.clean-artifacts }}

  #     - name: install
  #       shell: bash -l {0}
  #       run: |
  #         python -m pip install -vv --no-index --no-deps --ignore-installed --find-links=dist jupyterlab-fonts

  #     - name: check (ext)
  #       shell: bash -l {0}
  #       run: |
  #         jupyter labextension list
  #         jupyter labextension list 2>&1 | grep -ie "@deathbeds/jupyterlab-font.*enabled.*ok.*python.*jupyterlab-fonts" -

  #     - name: test (pytest)
  #       shell: bash -l {0}
  #       run: doit test:pytest

  #     - name: test (robot)
  #       shell: bash -l {0}
  #       run: doit test || doit test || doit test

  #     - name: upload (reports)
  #       if: always()
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: |
  #           jupyterlab-fonts-${{ github.run_number }}-reports-${{ runner.os }}-f${{ matrix.python-version }}
  #         path: ./build/reports
